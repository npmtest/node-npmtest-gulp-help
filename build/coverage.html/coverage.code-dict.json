{"/home/travis/build/npmtest/node-npmtest-gulp-help/test.js":"/* istanbul instrument in package npmtest_gulp_help */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-help/lib.npmtest_gulp_help.js":"/* istanbul instrument in package npmtest_gulp_help */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_help = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_help = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-help/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-help && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_help */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_help\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_help.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_help.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_help.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_help.__dirname + '/lib.npmtest_gulp_help.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-help/node_modules/gulp-help/index.js":"var objectAssign = require('object-assign'),\n  chalk = require('chalk'),\n  attachHelp = require('./lib/attach-help.js'),\n  calculateMargin = require('./lib/calculate-margin.js'),\n  noop = require('./lib/noop'),\n  DEFAULT_OPTIONS = {\n    aliases: [],\n    description: 'Display this help text.',\n    afterPrintCallback: noop,\n    hideDepsMessage: false,\n    hideEmpty: false\n  };\n\nmodule.exports = function (gulp, options) {\n  var originalTaskFn = gulp.task;\n\n  options = objectAssign({}, DEFAULT_OPTIONS, options);\n\n  /**\n   * gulp.task(name[, help, deps, fn, taskOptions])\n   *\n   * Adds `help` and `taskOptions` to the typical gulp task definition:\n   * https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulptaskname-deps-fn\n   * @param {string} name\n   * @param {string | boolean} [help]\n   * @param {Array} [deps]\n   * @param {function} [fn]\n   * @param {object} [taskOptions]\n   */\n  gulp.task = function (name, help, deps, fn, taskOptions) {\n    var task;\n\n    /* jshint noempty: false */\n    if (name && (help === null || help === undefined)) {\n      // just a name. do nothing.\n    } else if (help === false) {\n      // .task('test', false, ...)\n      //ignoredTasks.push(name);\n      if (typeof deps === 'function') {\n        // .task('test', false, function(){}, {})\n        taskOptions = fn;\n        fn = deps;\n        deps = undefined;\n      } else {\n        // .task('test', false, ['dep'], function(){}, {})\n        // nothing needs to be re-assigned\n      }\n    } else if (typeof help === 'function') {\n      // .task('test', function(){})\n      taskOptions = deps;\n      fn = undefined;\n      deps = help;\n      help = undefined;\n    } else if (Array.isArray(help)) {\n      // .task('test', ['dep'], ...)\n      taskOptions = fn;\n      fn = deps;\n      deps = help;\n      help = undefined;\n    } else if (name && !deps) {\n      // .task('test', '...')\n      // help text with no func and no deps\n    } else if (typeof deps === 'function') {\n      // .task('test', '...', function, {})\n      taskOptions = fn;\n      fn = deps;\n      deps = undefined;\n    } else if (Array.isArray(deps)) {\n      // .task('test', '...', ['dep'], function, {})\n      // nothing needs to be re-assigned\n    } else {\n      throw new Error('gulp-help: Unexpected arg types. Should be in the form: `gulp.task(name[, help, deps, fn, taskOptions])`');\n    }\n\n    if (!deps) {\n      originalTaskFn.call(gulp, name, fn);\n    } else {\n      originalTaskFn.call(gulp, name, deps, fn);\n    }\n\n    task = gulp.tasks[name];\n\n    taskOptions = objectAssign({\n      aliases: []\n    }, taskOptions);\n\n\n    taskOptions.aliases.forEach(function (alias) {\n      gulp.task(alias, false, [name], noop);\n    });\n\n    attachHelp(task, help, deps, taskOptions);\n\n    return gulp;\n  };\n\n  gulp.task('help', options.description, function () {\n    var marginData = calculateMargin(gulp.tasks);\n    var margin = marginData.margin;\n    var hideDepsMessageOpt = options.hideDepsMessage;\n    var hideEmptyOpt = options.hideEmpty;\n    var showAllTasks = process.argv.indexOf('--all') !== -1;\n    var afterPrintCallback = options.afterPrintCallback;\n\n    // set options buffer if the tasks array has options\n    var optionsBuffer = marginData.hasOptions ? '  --' : '';\n\n    console.log('');\n    console.log(chalk.underline('Usage'));\n    console.log('  gulp [TASK] [OPTIONS...]');\n    console.log('');\n    console.log(chalk.underline('Available tasks'));\n    Object.keys(gulp.tasks).sort().forEach(function (name) {\n      if (gulp.tasks[name].help || showAllTasks) {\n        var help = gulp.tasks[name].help || {message: '', options: {}};\n\n        if (!showAllTasks && help.message === '' && hideEmptyOpt) {\n          return; //skip task\n        }\n        var args = [' ', chalk.cyan(name)];\n\n        args.push(new Array(margin - name.length + 1 + optionsBuffer.length).join(' '));\n\n        if (help.message) {\n          args.push(help.message);\n        }\n\n        if (help.aliases) {\n          args.push(help.aliases);\n        }\n\n        if (help.depsMessage && !hideDepsMessageOpt) {\n          args.push(chalk.cyan(help.depsMessage));\n        }\n\n        var options = Object.keys(help.options).sort();\n        options.forEach(function (option) {\n          var optText = help.options[option];\n          args.push('\\n ' + optionsBuffer + chalk.cyan(option) + ' ');\n\n          args.push(new Array(margin - option.length + 1).join(' '));\n          args.push(optText);\n        });\n\n        console.log.apply(console, args);\n      }\n    });\n    console.log('');\n    if (afterPrintCallback) {\n      afterPrintCallback(gulp.tasks);\n    }\n  }, options);\n\n  // do not add default task if one already exists\n  if (gulp.tasks['default'] === undefined) {\n    gulp.task('default', false, ['help']);\n  }\n\n  return gulp;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-help/node_modules/gulp-help/lib/attach-help.js":"module.exports = function (task, msg, deps, taskOptions) {\n  if (!task) {\n    return;\n  }\n\n  if (msg === false) {\n    delete task.help;\n    return;\n  }\n\n  msg = (typeof msg === 'string') ? msg : '';\n\n  var aliases = '';\n  if (taskOptions.aliases && taskOptions.aliases.length > 0) {\n    aliases = 'Aliases: ' + taskOptions.aliases.join(', ');\n  }\n\n  var depsMessage = '';\n  if (deps && typeof deps === 'object' && deps.length > 0) {\n    depsMessage = '[' + deps.join(', ') + ']';\n  }\n\n  task.help = {\n    message: msg,\n    aliases: aliases,\n    depsMessage: depsMessage,\n    options: taskOptions.options || {}\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-help/node_modules/gulp-help/lib/calculate-margin.js":"/**\n * @param {object} tasksObj - gulp.tasks\n *\n * returns:\n *  margin - length of longest task / options name\n *  hasOptions - true if any task has option(s)\n *\n * @returns {{margin: number, hasOptions: boolean}}\n */\nmodule.exports = function (tasksObj) {\n  var hasOptions = false;\n  var margin = Object.keys(tasksObj).reduce(function (m, taskName) {\n    var optionsMargin = 0, opts;\n    // if exists, iterate options list to calculate margin for options\n    var includeAll = process.argv.indexOf('--all') !== -1;\n    if (includeAll || (tasksObj[taskName].help && tasksObj[taskName].help.options)) {\n      var help = tasksObj[taskName].help || {options: {}};\n      opts = Object.keys(help.options).sort();\n      optionsMargin = opts.reduce(function (m, opt) {\n        // if, at any time while iterating the tasks array, we also iterate an opts array, set hasOptions flag\n        hasOptions = true;\n        return m > opt.length ? m : opt.length;\n      }, 0);\n    }\n\n    if (!(tasksObj[taskName].help || includeAll) || (m > taskName.length && m > optionsMargin)) {\n      return m;\n    } else if (optionsMargin > taskName.length) {\n      return optionsMargin;\n    } else {\n      return taskName.length;\n    }\n  }, 0);\n  return {\n    margin: margin,\n    hasOptions: hasOptions\n  };\n};\n\n","/home/travis/build/npmtest/node-npmtest-gulp-help/node_modules/gulp-help/lib/noop.js":"module.exports = function() {};\n"}